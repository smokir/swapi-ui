{"version":3,"file":"static/js/243.a11389ab.chunk.js","mappings":"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","sources":["components/CardDetails/styled.ts","components/CardDetails/CardDetails.tsx","screens/Home/components/Grid/styled.ts","screens/Home/components/Grid/Grid.tsx","screens/Home/styled.ts","screens/Home/Home.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Typography } from '@mui/material';\nimport { theme } from 'styles/theme';\n\nexport const DetailRow = styled(Typography)`\n  &:not(:last-child) {\n    margin: ${theme.spacing(1)} 0;\n  }\n`;\n\nexport const Bold = styled.span`\n  font-weight: bold;\n`;\n","import { Bold, DetailRow } from './styled';\n\nexport const CardDetails = ({ details }: { details: Record<string, string | string[]> }) => (\n  <>\n    {Object.entries(details).map(([key, value]) => (\n      <DetailRow key={key} variant='body2' color='text.secondary' title={value.toString()}>\n        <Bold>{key}</Bold>: {value}\n      </DetailRow>\n    ))}\n  </>\n);\n","import styled from '@emotion/styled';\nimport { Card } from '@mui/material';\nimport { theme } from 'styles/theme';\n\nexport const Wrapper = styled.div`\n  min-height: 400px;\n`;\n\nexport const Content = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));\n  grid-gap: ${theme.spacing(2)};\n`;\n\nexport const StyledCard = styled(Card)`\n  max-width: 330px;\n  height: 190px;\n\n  /* TODO: use MUI palette color */\n  :after {\n    content: 'â†’';\n    float: right;\n    position: relative;\n    top: -30px;\n    width: 100%;\n    height: 30px;\n    color: transparent;\n    background-color: transparent;\n    background-image: linear-gradient(\n      to top,\n      #282727 4%,\n      rgba(40, 39, 39, 0.9) 30%,\n      rgba(40, 39, 39, 0)\n    );\n  }\n`;\n","import { Link } from 'react-router-dom';\n\nimport { CardContent, Typography, CardActionArea, Skeleton } from '@mui/material';\n\nimport { API_RESULTS_PER_PAGE } from 'constants/api';\nimport { useAppSelector } from 'store';\nimport { selectResourcesForCards, selectResourcesMeta } from 'store/modules/resources';\n\nimport { CardDetails } from 'components';\n\nimport { Wrapper, Content, StyledCard } from './styled';\n\nconst STUB_ARRAY = new Array(API_RESULTS_PER_PAGE).fill(1);\n\nexport const Grid = () => {\n  const { resourceType, loading, error } = useAppSelector(selectResourcesMeta);\n  const resources = useAppSelector(selectResourcesForCards);\n\n  return (\n    <Wrapper>\n      {!loading && resources.length === 0 && !error && (\n        <Typography variant='h5' color='text.secondary'>\n          No data\n        </Typography>\n      )}\n\n      {error && (\n        <Typography variant='h5' color='text.secondary'>\n          Error: {error}\n        </Typography>\n      )}\n\n      <Content>\n        {!loading &&\n          resources.map(({ id, title, description, details }) => (\n            <StyledCard key={id} elevation={8}>\n              <CardActionArea\n                component={Link}\n                to={`/${resourceType}/${id}`}\n                sx={{ height: '100%' }}\n              >\n                <CardContent>\n                  <Typography variant='body1'>{title}</Typography>\n\n                  {description && (\n                    <Typography variant='body2' color='text.secondary'>\n                      {description}\n                    </Typography>\n                  )}\n\n                  <CardDetails details={details} />\n                </CardContent>\n              </CardActionArea>\n            </StyledCard>\n          ))}\n\n        {loading &&\n          STUB_ARRAY.map((_, index) => (\n            <StyledCard key={index} elevation={8}>\n              <Skeleton variant='rectangular' sx={{ height: '100%' }} />\n            </StyledCard>\n          ))}\n      </Content>\n    </Wrapper>\n  );\n};\n","import styled from '@emotion/styled';\nimport { Box, Paper } from '@mui/material';\n\nimport { theme } from 'styles/theme';\n\nexport const Wrapper = styled(Paper)`\n  display: flex;\n  align-items: flex-start;\n  width: 100%;\n  column-gap: ${theme.spacing(2)};\n  padding: ${theme.spacing(3)};\n\n  @media screen and (max-width: 580px) {\n    flex-direction: column;\n  }\n`;\n\nexport const Body = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  row-gap: ${theme.spacing(2)};\n  padding: ${theme.spacing(0.5)};\n`;\n","import { SyntheticEvent, useCallback, useEffect, useMemo, ChangeEvent } from 'react';\n\nimport { MenuItem, MenuList, TextField, Typography, Pagination, debounce } from '@mui/material';\n\nimport { API_RESULTS_PER_PAGE } from 'constants/all';\nimport { useAppDispatch, useAppSelector } from 'store';\nimport {\n  RESOURCE_TYPE,\n  fetchResources,\n  RESOURCE_TYPE_TITLE,\n  selectResourcesMeta,\n  setSearch,\n  setPage,\n  setResourceType,\n  isResourceType,\n} from 'store/modules/resources';\n\nimport { Grid } from './components';\nimport { Body, Wrapper } from './styled';\nimport { noop } from 'utils';\n\nexport const Home = () => {\n  const dispatch = useAppDispatch();\n\n  const { count, page, search, resourceType, loading } = useAppSelector(selectResourcesMeta);\n\n  const pages = Math.ceil(count / API_RESULTS_PER_PAGE);\n\n  const onChangeSearch = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => dispatch(setSearch(e.target.value)),\n    [dispatch],\n  );\n\n  const onChangeResourceType = useCallback(\n    (e: SyntheticEvent<HTMLLIElement>) => {\n      const value = e.currentTarget.dataset.resourceType;\n      if (value && isResourceType(value)) {\n        dispatch(setResourceType(value));\n      } else {\n        console.error(`Incorrect resource type data attribute: ${value}`);\n      }\n    },\n    [dispatch],\n  );\n\n  const onChangePage = useCallback(\n    (_: unknown, page: number) => dispatch(setPage(page)),\n    [dispatch],\n  );\n\n  const fetch = useCallback(\n    (resourceType, page, search) =>\n      dispatch(fetchResources({ resourceType, page, search })).catch(noop),\n    [dispatch],\n  );\n\n  const fetchDebounced = useMemo(() => debounce(fetch, 500), [fetch]);\n\n  useEffect(() => {\n    fetch(resourceType, page, search);\n  }, [dispatch, fetch, page, resourceType]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    if (search) {\n      fetchDebounced(resourceType, page, search);\n    }\n  }, [dispatch, fetch, search]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <Wrapper elevation={1}>\n      <MenuList>\n        {Object.values(RESOURCE_TYPE).map(value => (\n          <MenuItem\n            key={value}\n            selected={resourceType === value}\n            data-resource-type={value}\n            onClick={onChangeResourceType}\n            disabled={loading}\n          >\n            <Typography variant='body2'>{RESOURCE_TYPE_TITLE[value]}</Typography>\n          </MenuItem>\n        ))}\n      </MenuList>\n\n      <Body>\n        <TextField\n          // label='Search'\n          placeholder='Search ...'\n          size='small'\n          value={search}\n          onChange={onChangeSearch}\n          // TODO:\n          // helperText={search && !loading && `${count} matching results`}\n        />\n\n        <Grid />\n\n        <Pagination page={Number(page)} count={pages} onChange={onChangePage} disabled={loading} />\n      </Body>\n    </Wrapper>\n  );\n};\n"],"names":["DetailRow","styled","Typography","theme","Bold","CardDetails","details","Object","entries","map","key","value","variant","color","title","toString","Wrapper","Content","StyledCard","Card","STUB_ARRAY","Array","API_RESULTS_PER_PAGE","fill","Grid","useAppSelector","selectResourcesMeta","resourceType","loading","error","resources","selectResourcesForCards","length","id","description","elevation","CardActionArea","component","Link","to","sx","height","CardContent","_","index","Skeleton","Paper","Body","Box","Home","dispatch","useAppDispatch","count","page","search","pages","Math","ceil","onChangeSearch","useCallback","e","setSearch","target","onChangeResourceType","currentTarget","dataset","isResourceType","setResourceType","console","onChangePage","setPage","fetch","fetchResources","catch","noop","fetchDebounced","useMemo","debounce","useEffect","MenuList","values","RESOURCE_TYPE","MenuItem","selected","onClick","disabled","RESOURCE_TYPE_TITLE","TextField","placeholder","size","onChange","Pagination","Number"],"sourceRoot":""}